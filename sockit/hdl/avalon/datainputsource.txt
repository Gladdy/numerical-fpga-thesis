module md5input (
    input clk,
    input reset,

    input        avs_write,
    input [31:0] avs_writedata,
    input [8:0]  avs_address,

    output        md5_write,
    output [31:0] md5_writedata,
    output [8:0]  md5_writeaddr
);

assign md5_write = avs_write;
assign md5_writedata = avs_writedata;
assign md5_writeaddr = avs_address;

endmodule

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

ENTITY data_input IS
    PORT(   
        -- Basic signals
        clock : in std_logic;
        reset : in std_logic;
        
        -- INTERNAL SIGNALS
        input_data : in std_logic_vector(127 downto 0);
        input_set : in std_logic;
        
        output_data : out std_logic_vector(127 downto 0);
        output_set : out std_logic;
        output_waitrequest : in std_logic;
        
        control_data : in std_logic_vector(31 downto 0);
        control_set : in std_logic;
        
        
        -- EXPOSED / EXPORTED SIGNALS
        input_data_export : out std_logic_vector(127 downto 0);
        input_set_export : out std_logic;
        
        output_data_export : in std_logic_vector(127 downto 0);
        output_set_export : in std_logic;
        output_waitrequest_export : out std_logic;
        
        control_data_export : out std_logic_vector(31 downto 0);
        control_set_export : out std_logic
    );
END data_input;

ARCHITECTURE behaviour OF data_input IS 

BEGIN
    PROCESS(clock)
    BEGIN
        IF rising_edge(clock) THEN
            --Data input
            input_data_export <= input_data;
            input_set_export <= input_set;
            
            --Data output
            output_data <= output_data_export;
            output_set <= output_set_export;
            output_waitrequest_export <= output_waitrequest;
            
            --Control input
            control_data_export <= control_data;
            control_set_export <= control_set;          
        END IF;
    END PROCESS;
END;